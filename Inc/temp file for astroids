/*
 * misc.c
 *
 *  Created on: 17. jan. 2025
 *      Author: Bruger
 */


#include <stdio.h>
#include "misc.h"
#include "ansi.h"
// Define the screen size and sprite size
#define SCREEN_WIDTH 80
#define SPRITE_WIDTH 9

void gotoxy(uint8_t x, uint8_t y) {
	printf("\033[%d;%dH", y + 1, x + 1);
}
void clrscr() {
	uart_init(115200 );
    printf("\033[2J"); // ANSI escape sequence to clear the screen
    printf("\033[H");  // Move cursor to home position (top-left corner).
}

void clear_sprite(uint8_t x_pos, uint8_t y_pos) {
    for (uint8_t current_row = 0; current_row < 4; current_row++) {
        for (uint8_t current_column = 0; current_column < 9; current_column++) {
            gotoxy(x_pos + current_column, y_pos + current_row);
            printf(" ");
        }
    }
}
void draw_astroid_sprite(char buffer[SCREEN_WIDTH][SCREEN_WIDTH],uint8_t color_buffer[80][80], uint8_t x_pos, uint8_t y_pos) {
	uint8_t astroid_color[][9] = {
			{0,7,8,7,7,0,0,11,11},
			{8,7,7,8,7,7,7,11,11},
			{7,8,7,7,7,7,0,11,11},
			{8,7,7,7,8,8,0,11,11},
	};

	uint8_t astroid_char[][9] = {
			{220,220,219,219,220,0,0,42,42},
			{220,219,219,219,219,219,220,42,42},
			{219,219,219,219,219,223,0,42,42},
			{223,219,219,219,223,223,223,42,42},
	};


	for (uint8_t current_row = 0; current_row < 4; current_row++) {
	        for (uint8_t current_column = 0; current_column < 9; current_column++) {
	            buffer[y_pos + current_row][x_pos + current_column] = astroid_char[current_row][current_column];
	            color_buffer[y_pos + current_row][x_pos + current_column] = astroid_color[current_row][current_column];  // Set color
	        }
	    }
	}

void print_buffer(char buffer[80][80], uint8_t color_buffer[80][80], uint8_t width, uint8_t height) {
	for (uint8_t row = 0; row < height; row++) {
		gotoxy(0, row);
		for (uint8_t col = 0; col < width; col++) {
			if (buffer[row][col] == 0) {
				fgcolor(0);
				printf(" ");
			} else {
				fgcolor(color_buffer[row][col]);
				printf("%c", buffer[row][col]);
			}
		}
	}
}
-----------------------------------------------------------------------------------------------------------------------
main

#include "stm32f30x_conf.h"  // STM32 config
#include "30010_io.h"        // Input/output library for this course
#include <stdint.h>          // For uint8_t
#include "misc.h"            // Miscellaneous functions
#include "ansi.h"            // ANSI escape sequences


#define SCREEN_WIDTH 180
#define SCREEN_HEIGHT 40
#define SPRITE_WIDTH 9
#define SPRITE_HEIGHT 4
#define NUM_ASTEROIDS 5 // Number of asteroids

int main() {
    uart_init(115200);
    clrscr();
    hide_cursor();

    // Asteroid positions and directions
    uint8_t x_pos[NUM_ASTEROIDS];
    uint8_t y_pos[NUM_ASTEROIDS];
    int8_t y_direction[NUM_ASTEROIDS];

    // Buffers for drawing and printing
    char buffer[SCREEN_WIDTH][SCREEN_HEIGHT] = {0};
    uint8_t color_buffer[SCREEN_WIDTH][SCREEN_HEIGHT] = {0};

    // Initialize positions and directions
    for (uint8_t i = 0; i < NUM_ASTEROIDS; i++) {
        x_pos[i] = SCREEN_WIDTH - (i * 15);  // Stagger starting x-positions
        y_pos[i] = 5 + (i * 6);              // Stagger starting y-positions
        y_direction[i] = (i % 2 == 0) ? 1 : -1; // Alternate directions
    }

    // Animation loop
    while (1) {
        // Clear buffers
        memset(buffer, 0, sizeof(buffer));
        memset(color_buffer, 0, sizeof(color_buffer));

        // Update positions and directions
        for (uint8_t i = 0; i < NUM_ASTEROIDS; i++) {
            x_pos[i]--; // Move left
            if (x_pos[i] + SPRITE_WIDTH == 0) {
                // Reset asteroid to right side when it goes off-screen
                x_pos[i] = SCREEN_WIDTH - 1;
            }

            // Update vertical position for "floating" effect
            y_pos[i] += y_direction[i];
            if (y_pos[i] <= 0 || y_pos[i] >= SCREEN_HEIGHT - SPRITE_HEIGHT) {
                y_direction[i] *= -1; // Reverse direction when hitting top or bottom
            }
        }

        // Draw all asteroids at their new positions
        for (uint8_t i = 0; i < NUM_ASTEROIDS; i++) {
            draw_astroid_sprite(buffer, color_buffer, x_pos[i], y_pos[i]);
        }

        // Print buffer to screen
        print_buffer(buffer, color_buffer, SCREEN_WIDTH, SCREEN_HEIGHT);

        // Add delay for smoother movement
        for (volatile int delay = 0; delay < 10000; delay++);
    }

    return 0;
}
